#include "malwarex.h"
#include <iostream>
#include <vector>
#include <string>
#include <stdlib.h>

#define DEBUG_MODE 1

class MalwareX{
    
    int N, M;
    std::vector<int> L;
    std::vector<int> L_flag;
    std::vector<int> P;
    int calls;
    int call_limit;
    std::vector<std::string> resp;
    
public:
    
    void initialize(int NVAL, int MVAL, std::vector<int> LVAL, std::vector<int> PVAL, int CALL_LIMIT_VAL, int key){
        if(key == 123){
            N = NVAL;
            M = MVAL;
            L = LVAL;
            L_flag.resize(N+M);
            for(int i=0; i<N+M; i++) L_flag[i] = 0;
            int cur = 0;
            for(int i=0; i<N+1; i++){
                int times = LVAL[i];
                while(times--){
                    L_flag[cur++] = 1;
                }
                cur++;
            }
            P = PVAL;
            calls = 0;
            call_limit = CALL_LIMIT_VAL;
        } else{
            printf("Illegal operation.");
            exit(0);
        }
        return;
    }
    
    int get_calls(){
        return calls;
    }
    
    std::vector<std::string> get_resp(){
        return resp;
    }
    
    std::string process(std::string s){
        calls++;
        if(calls > call_limit){
            printf("Wrong Answer: too many calls\n");
            exit(0);
        }
        if(s.length() != N){
            printf("Wrong Answer: illegal call\n");
            exit(0);
        }
        for(int i=0; i<N; i++) if(s[i] != '0' && s[i] != '1'){
            printf("Wrong Answer: illegal call\n");
            exit(0);
        }
        std::string res = "";
        int encountered = 0;
        for(int i=0; i<N+M; i++){
            if(L_flag[i]){
                res += rand()%2 + '0';
                encountered++;
            } else res += s[P[i-encountered]];
        }
        resp.push_back(res);
        return res;
    }
    
} malware;

std::string sendMessage(std::string s){
    return malware.process(s);
}

int main(){
    // get test data
    int N, M;
    scanf("%d%d", &N, &M);
    std::vector<int> L(N+1);
    for(int i=0; i<N+1; i++) scanf("%d", &L[i]);
    std::vector<int> P(N);
    for(int i=0; i<N; i++) scanf("%d", &P[i]);
    // initialize the malware
    malware.initialize(N, M, L, P, 15, 123);
    // call alice
    if(DEBUG_MODE) printf("<< calling alice...\n");
    alice(N, M, L);
    if(DEBUG_MODE) printf(">> alice has returned.\n");
    // call bob
    if(DEBUG_MODE) printf("<< calling bob...\n");
    std::vector<int> ans = bob(N, M, malware.get_calls(), malware.get_resp());
    if(DEBUG_MODE) printf(">> bob has returned.\n");
    // check the answer
    if(DEBUG_MODE) printf("<> checking correctness of the answer...\n");
    if(ans == L) printf("Accepted: %d\n", malware.get_calls());
    else{
        printf("Wrong Answer: incorrect\n");
        if(DEBUG_MODE){
            printf("Expected: ");
            for(int x : L) printf("%d ", x);
            printf("\n");
            printf("Output: ");
            for(int x : ans) printf("%d ", x);
            printf("\n");
        }
    }
    return 0;
}
